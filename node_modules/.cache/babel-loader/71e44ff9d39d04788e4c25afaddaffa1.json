{"ast":null,"code":"var _jsxFileName = \"/home/cah/NLW/06-together/letmeask/src/pages/Room.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport logoImg from \"../assets/images/logo.svg\";\nimport { Button } from '../components/Button';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from '../hooks/useAuth';\nimport { database } from '../services/firebase';\nimport '../styles/room.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Room() {\n  _s();\n\n  const [newQuestion, setNewQuestion] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [title, setTitle] = useState('');\n  const {\n    user\n  } = useAuth();\n  const params = useParams();\n  const roomId = params.id;\n  useEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n    roomRef.once('value', room => {\n      var _databaseRoom$questio;\n\n      const databaseRoom = room.val();\n      const firebaseQuestions = (_databaseRoom$questio = databaseRoom.questions) !== null && _databaseRoom$questio !== void 0 ? _databaseRoom$questio : {};\n      const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\n        return {\n          id: key,\n          content: value.content,\n          author: value.author,\n          isHighlighted: value.isHighlighted,\n          isAnswered: value.isAnswered\n        };\n      });\n      setTitle(databaseRoom.title);\n      setQuestions(parsedQuestions);\n    });\n  }, [roomId]);\n\n  async function handleSendNewQuestion(event) {\n    event.preventDefault();\n\n    if (newQuestion.trim() === '') {\n      return;\n    }\n\n    if (!user) {\n      throw new Error('You must be logged in.');\n    }\n\n    const question = {\n      content: newQuestion,\n      author: {\n        name: user.name,\n        avatar: user.avatar\n      },\n      isHighlighted: false,\n      isAnswered: false\n    };\n    await database.ref(`rooms/${roomId}/questions`).push(question);\n    setNewQuestion('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"Letmeask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RoomCode, {\n          code: roomId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Sala \", title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"x perguntas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendNewQuestion,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Digite sua perguta.\",\n          onChange: event => setNewQuestion(event.target.value),\n          value: newQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-footer\",\n          children: [user ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: user.avatar,\n              alt: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 20\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Para enviar uma pergunta, \", /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"fa\\xE7a seu login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 52\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            disabled: !user,\n            children: \"Enviar pergunta\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Room, \"umcxsRCwJURruvqCAQJTH3I9yWU=\", false, function () {\n  return [useAuth, useParams];\n});\n\n_c = Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["/home/cah/NLW/06-together/letmeask/src/pages/Room.tsx"],"names":["useEffect","useState","useParams","Button","RoomCode","useAuth","database","Room","newQuestion","setNewQuestion","questions","setQuestions","title","setTitle","user","params","roomId","id","roomRef","ref","once","room","databaseRoom","val","firebaseQuestions","parsedQuestions","Object","entries","map","key","value","content","author","isHighlighted","isAnswered","handleSendNewQuestion","event","preventDefault","trim","Error","question","name","avatar","push","logoImg","length","target"],"mappings":"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","sourcesContent":["import { FormEvent, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport logoImg from '../assets/images/logo.svg';\nimport { Button } from '../components/Button';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from '../hooks/useAuth';\nimport { database } from '../services/firebase';\n\nimport '../styles/room.scss';\n\ntype RoomParams = {\n  id: string;\n}\n\ntype FirebaseQuestions = Record<string, {\n  author: {\n    name: string;\n    avatar: string;\n  }\n  content: string;\n  isAnswered: boolean;\n  isHighlighted: boolean;\n}>\n\ntype Question = {\n  id: string;\n  author: {\n    name: string;\n    avatar: string;\n  }\n  content: string;\n  isAnswered: boolean;\n  isHighlighted: boolean;\n}\n\nexport function Room() {\n  const [newQuestion, setNewQuestion] = useState('');\n  const [questions, setQuestions] = useState<Question[]>([]);\n  const [title, setTitle] = useState('');\n  const { user } = useAuth();\n  const params = useParams<RoomParams>();\n  const roomId = params.id;\n\n  useEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n\n    roomRef.once('value', room => {\n      const databaseRoom = room.val();\n      const firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {};\n\n      const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\n        return {\n          id: key,\n          content: value.content,\n          author: value.author,\n          isHighlighted: value.isHighlighted,\n          isAnswered: value.isAnswered\n        }\n      });\n\n      setTitle(databaseRoom.title);\n      setQuestions(parsedQuestions);\n    })\n  }, [roomId]);\n\n  async function handleSendNewQuestion(event: FormEvent) {\n    event.preventDefault();\n    if (newQuestion.trim() === '') {\n      return;\n    }\n\n    if (!user) {\n      throw new Error('You must be logged in.');\n    }\n\n    const question = {\n      content: newQuestion,\n      author: {\n        name: user.name,\n        avatar: user.avatar\n      },\n      isHighlighted: false,\n      isAnswered: false\n    };\n\n    await database.ref(`rooms/${roomId}/questions`).push(question);\n\n    setNewQuestion('');\n  }\n\n  return (\n    <div id=\"page-room\">\n      <header>\n        <div className=\"content\">\n          <img src={ logoImg } alt=\"Letmeask\" />\n          <RoomCode code={ roomId } />\n        </div>\n      </header>\n      <main className=\"content\">\n        <div className=\"room-title\">\n          <h1>Sala { title }</h1>\n          { questions.length > 0 && <span>x perguntas</span> }\n        </div>\n\n        <form onSubmit={ handleSendNewQuestion }>\n          <textarea\n            placeholder=\"Digite sua perguta.\"\n            onChange={ event => setNewQuestion(event.target.value) }\n            value={ newQuestion }\n          />\n\n          <div className=\"form-footer\">\n            {\n              user\n                ? (<div className=\"user-info\">\n                    <img src={ user.avatar } alt={ user.name } />\n                    <span>{ user.name }</span>\n                  </div>)\n                : (<span>Para enviar uma pergunta, <button>faça seu login</button></span>)\n            }\n            <Button type=\"submit\" disabled={ !user }>Enviar pergunta</Button>\n          </div>\n        </form>\n      </main>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}